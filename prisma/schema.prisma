generator client {
  provider        = "prisma-client-js"
  output          = "generated/client"
  previewFeatures = ["fullTextSearchPostgres", "relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Options {
  guildId String  @id
  guild   Guild   @relation(fields: [guildId], references: [id])
  dupes   Boolean @default(false)
}

model Guild {
  id String @id

  excluded Boolean  @default(false)
  options  Options?

  packs PackInstall[]

  inventories Inventory[]
  characters  Character[]
}

model Like {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime @default(now())
  characterId String?
  mediaId     String?

  character PackCharacter? @relation(fields: [characterId], references: [id])
  media     PackMedia?     @relation(fields: [mediaId], references: [id])

  @@unique([userId, characterId])
  @@unique([userId, mediaId])
}

model User {
  id String @id

  availableTokens Int   @default(0)
  guarantees      Int[] @default([])

  dailyTimestamp DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  inventories Inventory[]
  characters  Character[]
  likes       Like[]

  ownedPacks      Pack[]        @relation(name: "PackOwner")
  maintainedPacks Pack[]        @relation(name: "PackMaintainers")
  installedPacks  PackInstall[]
}

model Inventory {
  userId  String
  guildId String

  user  User  @relation(fields: [userId], references: [id])
  guild Guild @relation(fields: [guildId], references: [id])

  availablePulls Int @default(10)
  // availableKeys  Int
  // floorsCleared  Int

  // lastPVE           DateTime?
  lastPull          DateTime?
  rechargeTimestamp DateTime?
  // keysTimestamp     DateTime?
  stealTimestamp    DateTime?

  characters Character[]

  partyMember1Id String? @unique
  partyMember2Id String? @unique
  partyMember3Id String? @unique
  partyMember4Id String? @unique
  partyMember5Id String? @unique

  partyMember1 Character? @relation("PartyMember1", fields: [partyMember1Id, userId, guildId], references: [characterId, userId, guildId])
  partyMember2 Character? @relation("PartyMember2", fields: [partyMember2Id, userId, guildId], references: [characterId, userId, guildId])
  partyMember3 Character? @relation("PartyMember3", fields: [partyMember3Id, userId, guildId], references: [characterId, userId, guildId])
  partyMember4 Character? @relation("PartyMember4", fields: [partyMember4Id, userId, guildId], references: [characterId, userId, guildId])
  partyMember5 Character? @relation("PartyMember5", fields: [partyMember5Id, userId, guildId], references: [characterId, userId, guildId])

  @@id([userId, guildId])
  @@unique([partyMember1Id, userId, guildId])
  @@unique([partyMember2Id, userId, guildId])
  @@unique([partyMember3Id, userId, guildId])
  @@unique([partyMember4Id, userId, guildId])
  @@unique([partyMember5Id, userId, guildId])
  @@index([lastPull(sort: Desc)])
}

model Character {
  characterId String
  mediaId     String
  rating      Int
  nickname    String?
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  guildId String
  userId  String

  guild     Guild     @relation(fields: [guildId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
  inventory Inventory @relation(fields: [userId, guildId], references: [userId, guildId])

  character PackCharacter @relation(fields: [characterId], references: [id])
  media     PackMedia     @relation(fields: [mediaId], references: [id])

  inventoryAsPartyMember1 Inventory? @relation("PartyMember1")
  inventoryAsPartyMember2 Inventory? @relation("PartyMember2")
  inventoryAsPartyMember3 Inventory? @relation("PartyMember3")
  inventoryAsPartyMember4 Inventory? @relation("PartyMember4")
  inventoryAsPartyMember5 Inventory? @relation("PartyMember5")

  @@id([characterId, userId, guildId])
  @@index([guildId])
  @@index([userId])
  @@index([mediaId])
  @@index([rating(sort: Desc)])
  @@index([createdAt(sort: Desc)])
}

model PackInstall {
  id String @id @default(cuid())

  byId    String?
  packId  String
  guildId String

  createdAt DateTime @default(now())

  by    User? @relation(fields: [byId], references: [id])
  pack  Pack  @relation(fields: [packId], references: [id])
  guild Guild @relation(fields: [guildId], references: [id])

  @@unique([packId, guildId])
  @@index([guildId])
}

model Pack {
  id String @id

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  installs PackInstall[]

  ownerId  String
  approved Boolean @default(false)
  hidden   Boolean @default(false)

  // manifest

  title       String?
  description String?
  author      String?
  image       String?
  url         String?
  nsfw        Boolean?
  webhookUrl  String?
  private     Boolean?
  conflicts   String[]

  media      PackMedia[]
  characters PackCharacter[]

  maintainers User[] @relation("PackMaintainers")
  owner       User?  @relation("PackOwner", fields: [ownerId], references: [id])
}

model ExternalUrl {
  id   String @id @default(cuid())
  site String
  url  String

  mediaId     String?
  characterId String?

  media     PackMedia?     @relation(fields: [mediaId], references: [id])
  character PackCharacter? @relation(fields: [characterId], references: [id])
}

model PackMedia {
  id            String        @id
  title         String
  alternative   String[]
  type          MEDIA_TYPE
  packId        String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  format        MEDIA_FORMAT?
  description   String?
  image         String?
  externalLinks ExternalUrl[]

  idAL   Int?
  idMal  Int?
  tags   String[]
  genres String[]

  characters CharacterRelation[]
  media      MediaRelation[]     @relation("mediaA")

  pack Pack @relation(fields: [packId], references: [id])

  likes Like[]
  owned Character[]

  related MediaRelation[] @relation("mediaB")

  textsearchable_index_col Unsupported("tsvector")? @default(dbgenerated("to_tsvector('english'::regconfig, COALESCE(title, ''::text))"))

  @@index([textsearchable_index_col], type: Gin)
}

model PackCharacter {
  id            String        @id
  name          String
  alternative   String[]
  packId        String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  description   String?
  // popularity    Int?
  rating        Int
  gender        String?
  age           String?
  image         String?
  externalLinks ExternalUrl[]

  media CharacterRelation[]

  pack Pack @relation(fields: [packId], references: [id])

  likes Like[]
  owned Character[]

  textsearchable_index_col Unsupported("tsvector")? @default(dbgenerated("to_tsvector('english'::regconfig, COALESCE(name, ''::text))"))

  @@index([rating(sort: Desc)])
  @@index([textsearchable_index_col], type: Gin)
}

model CharacterRelation {
  id     String          @id @default(cuid())
  nodeId String
  node   PackCharacter   @relation(fields: [nodeId], references: [id])
  role   CHARACTER_ROLE?

  mediaId String?
  media   PackMedia? @relation(fields: [mediaId], references: [id])
}

model MediaRelation {
  id       String          @id @default(cuid())
  mediaId  String
  media    PackMedia       @relation(name: "mediaA", fields: [mediaId], references: [id])
  nodeId   String
  node     PackMedia       @relation(name: "mediaB", fields: [nodeId], references: [id])
  relation MEDIA_RELATION?
}

enum MEDIA_TYPE {
  ANIME
  MANGA
  OTHER
}

enum MEDIA_FORMAT {
  TV
  TV_SHORT
  MOVIE
  SPECIAL
  OVA
  ONA
  MUSIC
  MANGA
  NOVEL
  ONE_SHOT
  VIDEO_GAME
}

enum MEDIA_RELATION {
  ADAPTATION
  PREQUEL
  SEQUEL
  PARENT
  CONTAINS
  SIDE_STORY
  SPIN_OFF
  OTHER
}

enum CHARACTER_ROLE {
  MAIN
  SUPPORTING
  BACKGROUND
}
